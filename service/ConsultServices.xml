<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <!-- consult & Related Services -->
    <service verb="signUp" noun="User" authenticate="anonymous-all">
        <description>Sign up a new user account</description>
        <in-parameters>
            <parameter name="emailAddress" required="true"/>
            <parameter name="companyName" required="true"/>
            <parameter name="firstName" required="true"/>
            <parameter name="lastName" required="true"/>
            <parameter name="newPassword" required="true"/>
            <parameter name="newPasswordVerify" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="userId"/>
            <parameter name="partyId"/>
            <parameter name="activationCode"/>
        </out-parameters>
        <actions>
            <!-- Validate password match -->
            <if condition="newPassword != newPasswordVerify">
                <return error="true" message="Passwords do not match"/>
            </if>
            
            <!-- Create person customer with user account -->
            <service-call name="mantle.party.PartyServices.create#PersonCustomer" 
                in-map="[firstName:firstName, lastName:lastName, emailAddress:emailAddress, disabled:'Y',
                         newPassword:newPassword, newPasswordVerify:newPasswordVerify, createUserAccount:true, userGroupId:'CONSULT_CLIENT']" 
                out-map="personResult"/>
            <set field="userId" from="personResult.userId"/>
            <set field="partyId" from="personResult.partyId"/>

            <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount" auto-field-map="[userId:userId]"/>

            <service-call name="create#moqui.security.UserPreference" in-map="[userId:userId, preferenceKey:'QUASAR_LEFT_OPEN', preferenceValue:'true']"/>

            <!-- Create or find company -->
            <entity-find entity-name="mantle.party.Organization" list="existingCompanies">
                <econdition field-name="organizationName" from="companyName" ignore-case="true"/>
            </entity-find>
            <if condition="existingCompanies">
                <return error="true" message="Company ${companyName} already exists. Email support at help@moquisupport.com to be added to this company."/>
            <else>
                <service-call name="mantle.party.PartyServices.create#Organization" in-map="[organizationName:companyName,ownerPartyId:partyId]" out-map="companyResult"/>
                <set field="companyPartyId" from="companyResult.partyId"/>
            </else>
            </if>

            <!-- Create relationship between person and company -->
            <service-call name="create#mantle.party.PartyRelationship" 
                in-map="[fromPartyId:partyId, toPartyId:companyPartyId, relationshipTypeEnumId:'PrtMember', fromDate:ec.user.nowTimestamp]"/>
            
            <set field="activationCode" from="getRandomString(12)"/>
            <service-call name="create#moqui.security.UserAuthcFactor" in-map="[userId:userId, factorTypeEnumId:'UafEmailVerify', fromDate:ec.user.nowTimestamp,
                factorOption:activationCode]"/>
            
            <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" in-map="[emailTemplateId:'CONSULT_SIGNUP', toAddresses:emailAddress,
                bodyParameters:[activationCode:activationCode,username:emailAddress]]"/>

            <return type="success" message="Please check your email for a link to activate your account."/>
        </actions>
    </service>

    <service verb="activate" noun="User" authenticate="anonymous-all">
        <description>Activate a user account</description>
        <in-parameters>
            <parameter name="username" required="true"/>
            <parameter name="code" required="true"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="moqui.security.UserAccount" list="existingUsers" limit="1" for-update="true">
                <econdition field-name="username" from="username"/>
            </entity-find>
            <if condition="!existingUsers">
                <return error="true" message="User ${username} not found."/>
            </if>
            <set field="userAccount" from="existingUsers[0]"/>

            <entity-find entity-name="moqui.security.UserAuthcFactor" list="existingAuthcFactors" limit="1">
                <econdition field-name="userId" from="userAccount.userId"/>
                <econdition field-name="factorTypeEnumId" from="'UafEmailVerify'"/>
                <econdition field-name="factorOption" from="code"/>
            </entity-find>

            <if condition="!existingAuthcFactors">
                <return type="danger" message="Activation code not found or expired."/>
            </if>
            <set field="authcFactor" from="existingAuthcFactors[0]"/>
            <if condition="authcFactor.thruDate?.before(ec.user.nowTimestamp)">
                <return type="info" message="Already activated. Please login."/>
            </if>
            <set field="authcFactor.thruDate" from="ec.user.nowTimestamp"/>
            <entity-update value-field="authcFactor"/>

            <if condition="userAccount.disabled != 'Y'">
                <return type="info" message="User is already activated. Please login."/>
            </if>
            <set field="userAccount.disabled" value="N"/>
            <entity-update value-field="userAccount"/>
            <return type="success" message="User ${username} activated. Please login."/>
        </actions>
    </service>
</services>
